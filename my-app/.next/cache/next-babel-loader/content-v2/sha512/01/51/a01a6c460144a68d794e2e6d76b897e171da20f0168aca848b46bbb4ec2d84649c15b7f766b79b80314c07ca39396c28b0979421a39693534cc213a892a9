{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/Owini/OneDrive/Desktop/NFTYVacation/my-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Owini/OneDrive/Desktop/NFTYVacation/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Owini\\\\OneDrive\\\\Desktop\\\\NFTYVacation\\\\my-app\\\\src\\\\components\\\\Hero\\\\Button.js\",\n    _this = this;\n\nimport { React, useEffect, useRef, useState } from 'react';\nimport Button from '../../styles/GlobalComponents/Button';\nimport Web3Modal from 'web3modal'; // walletConnected keep track of whether the user's wallet is connected or not\n\nvar _useState = useState(false),\n    walletConnected = _useState[0],\n    setWalletConnected = _useState[1]; // Create a reference to the Web3 Modal (used for connecting to Metamask) which persists as long as the page is open\n\n\nvar web3ModalRef = useRef();\n/**\r\n  * Returns a Provider or Signer object representing the Ethereum RPC with or without the\r\n  * signing capabilities of metamask attached\r\n  *\r\n  * A `Provider` is needed to interact with the blockchain - reading transactions, reading balances, reading state, etc.\r\n  *\r\n  * A `Signer` is a special type of Provider used in case a `write` transaction needs to be made to the blockchain, which involves the connected account\r\n  * needing to make a digital signature to authorize the transaction being sent. Metamask exposes a Signer API to allow your website to\r\n  * request signatures from the user using Signer functions.\r\n  *\r\n  * @param {*} needSigner - True if you need the signer, default false otherwise\r\n  */\n\nvar getProviderOrSigner = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var needSigner,\n        provider,\n        web3Provider,\n        _yield$web3Provider$g,\n        chainId,\n        signer,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            needSigner = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n            _context.next = 3;\n            return web3ModalRef.current.connect();\n\n          case 3:\n            provider = _context.sent;\n            web3Provider = new providers.Web3Provider(provider); // If user is not connected to the Rinkeby network, let them know and throw an error\n\n            _context.next = 7;\n            return web3Provider.getNetwork();\n\n          case 7:\n            _yield$web3Provider$g = _context.sent;\n            chainId = _yield$web3Provider$g.chainId;\n\n            if (!(chainId !== 4)) {\n              _context.next = 12;\n              break;\n            }\n\n            window.alert(\"Change the network to Rinkeby\");\n            throw new Error(\"Change network to Rinkeby\");\n\n          case 12:\n            if (!needSigner) {\n              _context.next = 15;\n              break;\n            }\n\n            signer = web3Provider.getSigner();\n            return _context.abrupt(\"return\", signer);\n\n          case 15:\n            return _context.abrupt(\"return\", web3Provider);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getProviderOrSigner() {\n    return _ref.apply(this, arguments);\n  };\n}();\n/*\r\n  connectWallet: Connects the MetaMask wallet\r\n*/\n\n\nvar connectWallet = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return getProviderOrSigner();\n\n          case 3:\n            setWalletConnected(true);\n            _context2.next = 9;\n            break;\n\n          case 6:\n            _context2.prev = 6;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 6]]);\n  }));\n\n  return function connectWallet() {\n    return _ref2.apply(this, arguments);\n  };\n}(); // useEffects are used to react to changes in state of the website\n// The array at the end of function call represents what state changes will trigger this effect\n// In this case, whenever the value of `walletConnected` changes - this effect will be called\n\n\nuseEffect(function () {\n  // if wallet is not connected, create a new instance of Web3Modal and connect the MetaMask wallet\n  if (!walletConnected) {\n    // Assign the Web3Modal class to the reference object by setting it's `current` value\n    // The `current` value is persisted throughout as long as this page is open\n    web3ModalRef.current = new Web3Modal({\n      network: \"rinkeby\",\n      providerOptions: {},\n      disableInjectedProvider: false\n    });\n    connectWallet();\n  }\n}, [walletConnected]);\n\nvar RenderButton = function RenderButton() {\n  if (walletConnected) {\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 16\n      }, _this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        onClick: connectWallet,\n        children: \"Connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, _this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: connectWallet,\n    children: \"Mint\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, _this);\n};\n\n_c = RenderButton;\nexport default RenderButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderButton\");","map":{"version":3,"sources":["C:/Users/Owini/OneDrive/Desktop/NFTYVacation/my-app/src/components/Hero/Button.js"],"names":["React","useEffect","useRef","useState","Button","Web3Modal","walletConnected","setWalletConnected","web3ModalRef","getProviderOrSigner","needSigner","current","connect","provider","web3Provider","providers","Web3Provider","getNetwork","chainId","window","alert","Error","signer","getSigner","connectWallet","console","error","network","providerOptions","disableInjectedProvider","RenderButton","loading"],"mappings":";;;;;;;AAAA,SAAQA,KAAR,EAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CAGC;;gBAG8CF,QAAQ,CAAC,KAAD,C;IAA/CG,e;IAAiBC,kB,iBAExB;;;AACA,IAAMC,YAAY,GAAGN,MAAM,EAA3B;AAKA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACC,IAAMO,mBAAmB;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAOC,YAAAA,UAAP,2DAAoB,KAApB;AAAA;AAAA,mBAGJF,YAAY,CAACG,OAAb,CAAqBC,OAArB,EAHI;;AAAA;AAGrBC,YAAAA,QAHqB;AAIrBC,YAAAA,YAJqB,GAIN,IAAIC,SAAS,CAACC,YAAd,CAA2BH,QAA3B,CAJM,EAQ3B;;AAR2B;AAAA,mBASDC,YAAY,CAACG,UAAb,EATC;;AAAA;AAAA;AASnBC,YAAAA,OATmB,yBASnBA,OATmB;;AAAA,kBAUvBA,OAAO,KAAK,CAVW;AAAA;AAAA;AAAA;;AAWzBC,YAAAA,MAAM,CAACC,KAAP,CAAa,+BAAb;AAXyB,kBAYnB,IAAIC,KAAJ,CAAU,2BAAV,CAZmB;;AAAA;AAAA,iBAevBX,UAfuB;AAAA;AAAA;AAAA;;AAgBnBY,YAAAA,MAhBmB,GAgBVR,YAAY,CAACS,SAAb,EAhBU;AAAA,6CAiBlBD,MAjBkB;;AAAA;AAAA,6CAmBpBR,YAnBoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBL,mBAAmB;AAAA;AAAA;AAAA,GAAzB;AAsBC;AACF;AACA;;;AACI,IAAMe,aAAa;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIZf,mBAAmB,EAJP;;AAAA;AAKlBF,YAAAA,kBAAkB,CAAC,IAAD,CAAlB;AALkB;AAAA;;AAAA;AAAA;AAAA;AAQlBkB,YAAAA,OAAO,CAACC,KAAR;;AARkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbF,aAAa;AAAA;AAAA;AAAA,GAAnB,C,CAYA;AACF;AACA;;;AACAvB,SAAS,CAAC,YAAM;AACd;AACA,MAAI,CAACK,eAAL,EAAsB;AACpB;AACA;AACAE,IAAAA,YAAY,CAACG,OAAb,GAAuB,IAAIN,SAAJ,CAAc;AACnCsB,MAAAA,OAAO,EAAE,SAD0B;AAEnCC,MAAAA,eAAe,EAAE,EAFkB;AAGnCC,MAAAA,uBAAuB,EAAE;AAHU,KAAd,CAAvB;AAKAL,IAAAA,aAAa;AACd;AACF,CAZQ,EAYN,CAAClB,eAAD,CAZM,CAAT;;AAeA,IAAMwB,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,MAAIxB,eAAJ,EAAqB;AACnB,QAAIyB,OAAJ,EAAa;AACX,0BAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACD,KAFD,MAEO;AACL,0BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEP,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF;AAKD;AACF;;AACC,sBACE,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAEA,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAjBH;;KAAMM,Y;AAmBR,eAAeA,YAAf","sourcesContent":["import {React, useEffect, useRef, useState} from 'react';\r\nimport Button from '../../styles/GlobalComponents/Button';\r\nimport Web3Modal from 'web3modal';\r\n\r\n\r\n // walletConnected keep track of whether the user's wallet is connected or not\r\n \r\n \r\n const [walletConnected, setWalletConnected] = useState(false);\r\n\r\n // Create a reference to the Web3 Modal (used for connecting to Metamask) which persists as long as the page is open\r\n const web3ModalRef = useRef();\r\n\r\n\r\n\r\n\r\n /**\r\n   * Returns a Provider or Signer object representing the Ethereum RPC with or without the\r\n   * signing capabilities of metamask attached\r\n   *\r\n   * A `Provider` is needed to interact with the blockchain - reading transactions, reading balances, reading state, etc.\r\n   *\r\n   * A `Signer` is a special type of Provider used in case a `write` transaction needs to be made to the blockchain, which involves the connected account\r\n   * needing to make a digital signature to authorize the transaction being sent. Metamask exposes a Signer API to allow your website to\r\n   * request signatures from the user using Signer functions.\r\n   *\r\n   * @param {*} needSigner - True if you need the signer, default false otherwise\r\n   */\r\n const getProviderOrSigner = async (needSigner = false) => {\r\n  // Connect to Metamask\r\n  // Since we store `web3Modal` as a reference, we need to access the `current` value to get access to the underlying object\r\n  const provider = await web3ModalRef.current.connect();\r\n  const web3Provider = new providers.Web3Provider(provider);\r\n\r\n\r\n\r\n  // If user is not connected to the Rinkeby network, let them know and throw an error\r\n  const { chainId } = await web3Provider.getNetwork();\r\n  if (chainId !== 4) {\r\n    window.alert(\"Change the network to Rinkeby\");\r\n    throw new Error(\"Change network to Rinkeby\");\r\n  }\r\n\r\n  if (needSigner) {\r\n    const signer = web3Provider.getSigner();\r\n    return signer;\r\n  }\r\n  return web3Provider;\r\n};\r\n\r\n  /*\r\n    connectWallet: Connects the MetaMask wallet\r\n  */\r\n    const connectWallet = async () => {\r\n      try {\r\n        // Get the provider from web3Modal, which in our case is MetaMask\r\n        // When used for the first time, it prompts the user to connect their wallet\r\n        await getProviderOrSigner();\r\n        setWalletConnected(true);\r\n  \r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n\r\n    // useEffects are used to react to changes in state of the website\r\n  // The array at the end of function call represents what state changes will trigger this effect\r\n  // In this case, whenever the value of `walletConnected` changes - this effect will be called\r\n  useEffect(() => {\r\n    // if wallet is not connected, create a new instance of Web3Modal and connect the MetaMask wallet\r\n    if (!walletConnected) {\r\n      // Assign the Web3Modal class to the reference object by setting it's `current` value\r\n      // The `current` value is persisted throughout as long as this page is open\r\n      web3ModalRef.current = new Web3Modal({\r\n        network: \"rinkeby\",\r\n        providerOptions: {},\r\n        disableInjectedProvider: false,\r\n      });\r\n      connectWallet();\r\n    }\r\n  }, [walletConnected]);\r\n\r\n\r\n  const RenderButton = () => {\r\n    if (walletConnected) {\r\n      if (loading) {\r\n        return <Button>Loading...</Button>;\r\n      } else {\r\n        return (\r\n          <Button onClick={connectWallet}>\r\n          Connect your wallet\r\n        </Button>\r\n        );\r\n      }\r\n    }\r\n      return (\r\n        <Button onClick={connectWallet}>\r\n          Mint\r\n        </Button>\r\n      );\r\n    };\r\n\r\nexport default RenderButton"]},"metadata":{},"sourceType":"module"}