{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/Owini/OneDrive/Desktop/Works/NFTY/my-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Owini/OneDrive/Desktop/Works/NFTY/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Owini\\\\OneDrive\\\\Desktop\\\\Works\\\\NFTY\\\\my-app\\\\src\\\\components\\\\Hero\\\\RenderButton.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Button from '../../styles/GlobalComponents/Button';\nimport Web3Modal from 'web3modal';\nimport { useRef, useEffect, useState } from 'react';\nimport { providers } from 'ethers';\n\nvar RenderButton = function RenderButton() {\n  _s();\n\n  var _useState = useState(false),\n      connectedWallet = _useState[0],\n      setconnectedWallet = _useState[1];\n\n  var web3ModalRef = useRef(); // always returns object as current\n\n  var providerOptions = {\n    walletconnect: {\n      \"package\": WalletConnectProvider,\n      options: {\n        infuraId: \"c9fbeef25811469f95f260d96ccefbfe\"\n      }\n    }\n  };\n\n  var getSignerOrProvider = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var needSigner,\n          provider,\n          web3Provider,\n          _yield$web3Provider$g,\n          chainId,\n          signer,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              needSigner = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n              _context.next = 3;\n              return web3ModalRef.current.connect();\n\n            case 3:\n              provider = _context.sent;\n              web3Provider = new providers.Web3Provider(provider);\n              _context.next = 7;\n              return web3Provider.getNetwork();\n\n            case 7:\n              _yield$web3Provider$g = _context.sent;\n              chainId = _yield$web3Provider$g.chainId;\n\n              if (!(chainId !== 4)) {\n                _context.next = 12;\n                break;\n              }\n\n              alert(\"USE RINKEEBY NETWORK\");\n              throw new Error(\"Change network to Rinkeby\");\n\n            case 12:\n              if (!needSigner) {\n                _context.next = 15;\n                break;\n              }\n\n              signer = web3Provider.getSigner();\n              return _context.abrupt(\"return\", signer);\n\n            case 15:\n              return _context.abrupt(\"return\", provider);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getSignerOrProvider() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var connectWallet = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return getSignerOrProvider();\n\n            case 3:\n              setconnectedWallet(true);\n              _context2.next = 9;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(\" error\", _context2.t0);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 6]]);\n    }));\n\n    return function connectWallet() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    web3ModalRef.current = new Web3Modal({\n      network: 'rinkeby',\n      providerOptions: {}\n    });\n  }, []);\n\n  if (!connectedWallet) {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      onClick: connectWallet,\n      children: \" Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, _this);\n  } else return /*#__PURE__*/_jsxDEV(Button, {\n    children: \" Mint \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(RenderButton, \"o2VVkBuD3cIBDkXIl10Kf1NNxtM=\");\n\n_c = RenderButton;\nexport default RenderButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderButton\");","map":{"version":3,"sources":["C:/Users/Owini/OneDrive/Desktop/Works/NFTY/my-app/src/components/Hero/RenderButton.js"],"names":["React","Button","Web3Modal","useRef","useEffect","useState","providers","RenderButton","connectedWallet","setconnectedWallet","web3ModalRef","providerOptions","walletconnect","WalletConnectProvider","options","infuraId","getSignerOrProvider","needSigner","current","connect","provider","web3Provider","Web3Provider","getNetwork","chainId","alert","Error","signer","getSigner","connectWallet","console","log","network"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAAQC,MAAR,EAAgBC,SAAhB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAASC,SAAT,QAA0B,QAA1B;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AAAA;;AAAA,kBAEqBF,QAAQ,CAAE,KAAF,CAF7B;AAAA,MAEnBG,eAFmB;AAAA,MAEDC,kBAFC;;AAI3B,MAAMC,YAAY,GAAGP,MAAM,EAA3B,CAJ2B,CAII;;AAE/B,MAAMQ,eAAe,GAAG;AACtBC,IAAAA,aAAa,EAAE;AACb,iBAASC,qBADI;AAEbC,MAAAA,OAAO,EAAE;AACPC,QAAAA,QAAQ,EAAE;AADH;AAFI;AADO,GAAxB;;AAWA,MAAMC,mBAAmB;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAOC,cAAAA,UAAP,2DAAoB,KAApB;AAAA;AAAA,qBACHP,YAAY,CAACQ,OAAb,CAAqBC,OAArB,EADG;;AAAA;AACpBC,cAAAA,QADoB;AAEpBC,cAAAA,YAFoB,GAEL,IAAIf,SAAS,CAACgB,YAAd,CAA2BF,QAA3B,CAFK;AAAA;AAAA,qBAGAC,YAAY,CAACE,UAAb,EAHA;;AAAA;AAAA;AAGlBC,cAAAA,OAHkB,yBAGlBA,OAHkB;;AAAA,oBAItBA,OAAO,KAAK,CAJU;AAAA;AAAA;AAAA;;AAKxBC,cAAAA,KAAK,CAAC,sBAAD,CAAL;AALwB,oBAMlB,IAAIC,KAAJ,CAAU,2BAAV,CANkB;;AAAA;AAAA,mBAQtBT,UARsB;AAAA;AAAA;AAAA;;AASlBU,cAAAA,MATkB,GASTN,YAAY,CAACO,SAAb,EATS;AAAA,+CAUjBD,MAViB;;AAAA;AAAA,+CAYnBP,QAZmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAnBJ,mBAAmB;AAAA;AAAA;AAAA,KAAzB;;AAeA,MAAMa,aAAa;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEZb,mBAAmB,EAFP;;AAAA;AAGlBP,cAAAA,kBAAkB,CAAC,IAAD,CAAlB;AAHkB;AAAA;;AAAA;AAAA;AAAA;AAKlBqB,cAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;;AALkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAbF,aAAa;AAAA;AAAA;AAAA,KAAnB;;AASEzB,EAAAA,SAAS,CAAC,YAAQ;AAEdM,IAAAA,YAAY,CAACQ,OAAb,GAAuB,IAAIhB,SAAJ,CAAc;AACnC8B,MAAAA,OAAO,EAAE,SAD0B;AAEnCrB,MAAAA,eAAe,EAAE;AAFkB,KAAd,CAAvB;AAMH,GARQ,EAQN,EARM,CAAT;;AAWE,MAAI,CAACH,eAAL,EAAqB;AACnB,wBACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAGqB,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF;AAGD,GAJD,MAMF,oBACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAGD,CA7DD;;GAAMtB,Y;;KAAAA,Y;AA+DN,eAAeA,YAAf","sourcesContent":["import React from 'react';\r\nimport Button from '../../styles/GlobalComponents/Button';\r\nimport Web3Modal from 'web3modal';\r\nimport {useRef, useEffect, useState} from 'react';\r\nimport { providers } from 'ethers';\r\n\r\nconst RenderButton = () => {\r\n\r\nconst [ connectedWallet , setconnectedWallet] = useState (false);\r\n\r\nconst web3ModalRef = useRef(); // always returns object as current\r\n\r\nconst providerOptions = {\r\n  walletconnect: {\r\n    package: WalletConnectProvider,\r\n    options: {\r\n      infuraId: \"c9fbeef25811469f95f260d96ccefbfe\"\r\n    }\r\n  }\r\n};\r\n\r\n\r\n\r\nconst getSignerOrProvider = async (needSigner = false) => {\r\n  const provider = await web3ModalRef.current.connect();\r\n  const web3Provider = new providers.Web3Provider(provider);\r\n  const { chainId } = await web3Provider.getNetwork();\r\n  if (chainId !== 4) {\r\n    alert(\"USE RINKEEBY NETWORK\");\r\n    throw new Error(\"Change network to Rinkeby\");\r\n  }\r\n  if (needSigner) {\r\n    const signer = web3Provider.getSigner();\r\n    return signer;\r\n  }\r\n  return provider;\r\n};\r\n\r\nconst connectWallet = async () => {\r\n  try {\r\n    await getSignerOrProvider();\r\n    setconnectedWallet(true);\r\n  } catch (error) {\r\n    console.log(\" error\", error);\r\n  }\r\n};\r\n\r\n  useEffect(()  =>  {\r\n\r\n      web3ModalRef.current = new Web3Modal({\r\n        network: 'rinkeby',\r\n        providerOptions: {},\r\n        \r\n  });\r\n\r\n  }, []);\r\n\r\n\r\n    if (!connectedWallet){\r\n      return(\r\n        <Button onClick ={connectWallet}> Connect Wallet</Button>\r\n      )\r\n    }\r\n    else\r\n  return (\r\n    <Button > Mint </Button>\r\n  )\r\n}\r\n\r\nexport default RenderButton"]},"metadata":{},"sourceType":"module"}