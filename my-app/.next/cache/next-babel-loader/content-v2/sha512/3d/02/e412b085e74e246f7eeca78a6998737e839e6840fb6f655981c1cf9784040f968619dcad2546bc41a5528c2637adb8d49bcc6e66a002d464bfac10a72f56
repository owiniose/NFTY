{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"C:/Users/Owini/OneDrive/Desktop/NFTYVacation/my-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Owini/OneDrive/Desktop/NFTYVacation/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Owini\\\\OneDrive\\\\Desktop\\\\NFTYVacation\\\\my-app\\\\src\\\\components\\\\Hero\\\\Hero.js\",\n    _this = this;\n\nimport { React, useEffect, useRef, useState } from 'react';\nimport Web3Modal from \"web3modal\";\nimport { Section, SectionText, SectionTitle, SectionSubText, SectionTextTop, SectionTextBottom, SectionTextMain } from '../../styles/GlobalComponents';\nimport Button from '../../styles/GlobalComponents/Button';\nimport { LeftSection, TopSection } from './HeroStyles'; // walletConnected keep track of whether the user's wallet is connected or not\n\nvar _useState = useState(false),\n    walletConnected = _useState[0],\n    setWalletConnected = _useState[1]; // Create a reference to the Web3 Modal (used for connecting to Metamask) which persists as long as the page is open\n\n\nvar web3ModalRef = useRef();\n/**\n  * Returns a Provider or Signer object representing the Ethereum RPC with or without the\n  * signing capabilities of metamask attached\n  *\n  * A `Provider` is needed to interact with the blockchain - reading transactions, reading balances, reading state, etc.\n  *\n  * A `Signer` is a special type of Provider used in case a `write` transaction needs to be made to the blockchain, which involves the connected account\n  * needing to make a digital signature to authorize the transaction being sent. Metamask exposes a Signer API to allow your website to\n  * request signatures from the user using Signer functions.\n  *\n  * @param {*} needSigner - True if you need the signer, default false otherwise\n  */\n\nvar getProviderOrSigner = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var needSigner,\n        provider,\n        web3Provider,\n        _yield$web3Provider$g,\n        chainId,\n        signer,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            needSigner = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n            _context.next = 3;\n            return web3ModalRef.current.connect();\n\n          case 3:\n            provider = _context.sent;\n            web3Provider = new providers.Web3Provider(provider); // If user is not connected to the Rinkeby network, let them know and throw an error\n\n            _context.next = 7;\n            return web3Provider.getNetwork();\n\n          case 7:\n            _yield$web3Provider$g = _context.sent;\n            chainId = _yield$web3Provider$g.chainId;\n\n            if (!(chainId !== 4)) {\n              _context.next = 12;\n              break;\n            }\n\n            window.alert(\"Change the network to Rinkeby\");\n            throw new Error(\"Change network to Rinkeby\");\n\n          case 12:\n            if (!needSigner) {\n              _context.next = 15;\n              break;\n            }\n\n            signer = web3Provider.getSigner();\n            return _context.abrupt(\"return\", signer);\n\n          case 15:\n            return _context.abrupt(\"return\", web3Provider);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getProviderOrSigner() {\n    return _ref.apply(this, arguments);\n  };\n}();\n/*\n  connectWallet: Connects the MetaMask wallet\n*/\n\n\nvar connectWallet = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return getProviderOrSigner();\n\n          case 3:\n            setWalletConnected(true);\n            _context2.next = 9;\n            break;\n\n          case 6:\n            _context2.prev = 6;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.error(_context2.t0);\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 6]]);\n  }));\n\n  return function connectWallet() {\n    return _ref2.apply(this, arguments);\n  };\n}(); // useEffects are used to react to changes in state of the website\n// The array at the end of function call represents what state changes will trigger this effect\n// In this case, whenever the value of `walletConnected` changes - this effect will be called\n\n\nuseEffect(function () {\n  // if wallet is not connected, create a new instance of Web3Modal and connect the MetaMask wallet\n  if (!walletConnected) {\n    // Assign the Web3Modal class to the reference object by setting it's `current` value\n    // The `current` value is persisted throughout as long as this page is open\n    web3ModalRef.current = new Web3Modal({\n      network: \"rinkeby\",\n      providerOptions: {},\n      disableInjectedProvider: false\n    });\n    connectWallet();\n  }\n}, [walletConnected]);\n\nvar renderButton = function renderButton() {\n  if (walletConnected) {\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 16\n      }, _this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        onClick: connectWallet,\n        children: \"Connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, _this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: connectWallet,\n    children: \"Mint\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, _this);\n};\n\nvar Hero = function Hero(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Section, {\n      children: /*#__PURE__*/_jsxDEV(LeftSection, {\n        children: [/*#__PURE__*/_jsxDEV(SectionTextTop, {\n          children: \"Mint A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, _this), /*#__PURE__*/_jsxDEV(SectionTextMain, {\n          children: \"VACATION\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(SectionTextBottom, {\n          children: \"With $250 Only!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: props.handleClick,\n          children: \"Learn More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 3\n    }, _this)\n  }, void 0, false);\n};\n\n_c = Hero;\nexport default Hero;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hero\");","map":{"version":3,"sources":["C:/Users/Owini/OneDrive/Desktop/NFTYVacation/my-app/src/components/Hero/Hero.js"],"names":["React","useEffect","useRef","useState","Web3Modal","Section","SectionText","SectionTitle","SectionSubText","SectionTextTop","SectionTextBottom","SectionTextMain","Button","LeftSection","TopSection","walletConnected","setWalletConnected","web3ModalRef","getProviderOrSigner","needSigner","current","connect","provider","web3Provider","providers","Web3Provider","getNetwork","chainId","window","alert","Error","signer","getSigner","connectWallet","console","error","network","providerOptions","disableInjectedProvider","renderButton","loading","Hero","props","handleClick"],"mappings":"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","sourcesContent":["import {React, useEffect, useRef, useState } from 'react';\nimport Web3Modal from \"web3modal\";\nimport { Section, SectionText, SectionTitle, SectionSubText, SectionTextTop, SectionTextBottom, SectionTextMain } from '../../styles/GlobalComponents';\nimport Button from '../../styles/GlobalComponents/Button';\nimport { LeftSection, TopSection } from './HeroStyles';\n\n\n\n // walletConnected keep track of whether the user's wallet is connected or not\n const [walletConnected, setWalletConnected] = useState(false);\n\n // Create a reference to the Web3 Modal (used for connecting to Metamask) which persists as long as the page is open\n const web3ModalRef = useRef();\n\n\n\n\n /**\n   * Returns a Provider or Signer object representing the Ethereum RPC with or without the\n   * signing capabilities of metamask attached\n   *\n   * A `Provider` is needed to interact with the blockchain - reading transactions, reading balances, reading state, etc.\n   *\n   * A `Signer` is a special type of Provider used in case a `write` transaction needs to be made to the blockchain, which involves the connected account\n   * needing to make a digital signature to authorize the transaction being sent. Metamask exposes a Signer API to allow your website to\n   * request signatures from the user using Signer functions.\n   *\n   * @param {*} needSigner - True if you need the signer, default false otherwise\n   */\n const getProviderOrSigner = async (needSigner = false) => {\n  // Connect to Metamask\n  // Since we store `web3Modal` as a reference, we need to access the `current` value to get access to the underlying object\n  const provider = await web3ModalRef.current.connect();\n  const web3Provider = new providers.Web3Provider(provider);\n\n\n\n  // If user is not connected to the Rinkeby network, let them know and throw an error\n  const { chainId } = await web3Provider.getNetwork();\n  if (chainId !== 4) {\n    window.alert(\"Change the network to Rinkeby\");\n    throw new Error(\"Change network to Rinkeby\");\n  }\n\n  if (needSigner) {\n    const signer = web3Provider.getSigner();\n    return signer;\n  }\n  return web3Provider;\n};\n\n  /*\n    connectWallet: Connects the MetaMask wallet\n  */\n    const connectWallet = async () => {\n      try {\n        // Get the provider from web3Modal, which in our case is MetaMask\n        // When used for the first time, it prompts the user to connect their wallet\n        await getProviderOrSigner();\n        setWalletConnected(true);\n  \n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    // useEffects are used to react to changes in state of the website\n  // The array at the end of function call represents what state changes will trigger this effect\n  // In this case, whenever the value of `walletConnected` changes - this effect will be called\n  useEffect(() => {\n    // if wallet is not connected, create a new instance of Web3Modal and connect the MetaMask wallet\n    if (!walletConnected) {\n      // Assign the Web3Modal class to the reference object by setting it's `current` value\n      // The `current` value is persisted throughout as long as this page is open\n      web3ModalRef.current = new Web3Modal({\n        network: \"rinkeby\",\n        providerOptions: {},\n        disableInjectedProvider: false,\n      });\n      connectWallet();\n    }\n  }, [walletConnected]);\n\n\n  const renderButton = () => {\n    if (walletConnected) {\n      if (loading) {\n        return <Button>Loading...</Button>;\n      } else {\n        return (\n          <Button onClick={connectWallet}>\n          Connect your wallet\n        </Button>\n        );\n      }\n    }\n      return (\n        <Button onClick={connectWallet}>\n          Mint\n        </Button>\n      );\n    };\n  \n\n\nconst Hero = (props) => (\n  <>\n  <Section >\n      <LeftSection>\n              <SectionTextTop>\n                Mint A\n              </SectionTextTop>\n        <SectionTextMain>\n          VACATION\n        </SectionTextMain>\n\n        <SectionTextBottom>\n           With $250 Only!\n        </SectionTextBottom>\n        \n        <Button onClick={props.handleClick}>Learn More</Button>\n      </LeftSection>\n    </Section>\n  </>\n);\n\nexport default Hero;"]},"metadata":{},"sourceType":"module"}