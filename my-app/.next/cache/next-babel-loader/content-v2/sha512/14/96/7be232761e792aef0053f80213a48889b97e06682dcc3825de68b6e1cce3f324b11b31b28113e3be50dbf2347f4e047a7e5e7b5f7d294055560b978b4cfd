{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Owini\\\\OneDrive\\\\Desktop\\\\NFTYVacation\\\\my-app\\\\src\\\\components\\\\Hero\\\\RenderButton.js\";\nimport { React, useEffect, useRef, useState } from 'react';\nimport Button from '../../styles/GlobalComponents/Button';\nimport Web3Modal from 'web3modal'; //  // walletConnected keep track of whether the user's wallet is connected or not\n//  const [walletConnected, setWalletConnected] = useState(false);\n//  // Create a reference to the Web3 Modal (used for connecting to Metamask) which persists as long as the page is open\n//  const web3ModalRef = useRef();\n//  /**\n//    * Returns a Provider or Signer object representing the Ethereum RPC with or without the\n//    * signing capabilities of metamask attached\n//    *\n//    * A `Provider` is needed to interact with the blockchain - reading transactions, reading balances, reading state, etc.\n//    *\n//    * A `Signer` is a special type of Provider used in case a `write` transaction needs to be made to the blockchain, which involves the connected account\n//    * needing to make a digital signature to authorize the transaction being sent. Metamask exposes a Signer API to allow your website to\n//    * request signatures from the user using Signer functions.\n//    *\n//    * @param {*} needSigner - True if you need the signer, default false otherwise\n//    */\n//  const getProviderOrSigner = async (needSigner = false) => {\n//   // Connect to Metamask\n//   // Since we store `web3Modal` as a reference, we need to access the `current` value to get access to the underlying object\n//   const provider = await web3ModalRef.current.connect();\n//   const web3Provider = new providers.Web3Provider(provider);\n//   // If user is not connected to the Rinkeby network, let them know and throw an error\n//   const { chainId } = await web3Provider.getNetwork();\n//   if (chainId !== 4) {\n//     window.alert(\"Change the network to Rinkeby\");\n//     throw new Error(\"Change network to Rinkeby\");\n//   }\n//   if (needSigner) {\n//     const signer = web3Provider.getSigner();\n//     return signer;\n//   }\n//   return web3Provider;\n// };\n//   /*\n//     connectWallet: Connects the MetaMask wallet\n//   */\n//     const connectWallet = async () => {\n//       try {\n//         // Get the provider from web3Modal, which in our case is MetaMask\n//         // When used for the first time, it prompts the user to connect their wallet\n//         await getProviderOrSigner();\n//         setWalletConnected(true);\n//       } catch (err) {\n//         console.error(err);\n//       }\n//     };\n//     // useEffects are used to react to changes in state of the website\n//   // The array at the end of function call represents what state changes will trigger this effect\n//   // In this case, whenever the value of `walletConnected` changes - this effect will be called\n//   useEffect(() => {\n//     // if wallet is not connected, create a new instance of Web3Modal and connect the MetaMask wallet\n//     if (!walletConnected) {\n//       // Assign the Web3Modal class to the reference object by setting it's `current` value\n//       // The `current` value is persisted throughout as long as this page is open\n//       web3ModalRef.current = new Web3Modal({\n//         network: \"rinkeby\",\n//         providerOptions: {},\n//         disableInjectedProvider: false,\n//       });\n//       connectWallet();\n//     }\n//   }, [walletConnected]);\n\nconst RenderButton = () => {\n  const {\n    0: walletConnected,\n    1: setWalletConnected\n  } = useState(false);\n\n  if (walletConnected) {\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 16\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Button, {\n        onClick: connectWallet,\n        children: \"Connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: connectWallet,\n    children: \"Mint\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n\nexport default RenderButton;","map":{"version":3,"sources":["C:/Users/Owini/OneDrive/Desktop/NFTYVacation/my-app/src/components/Hero/RenderButton.js"],"names":["React","useEffect","useRef","useState","Button","Web3Modal","RenderButton","walletConnected","setWalletConnected","loading","connectWallet"],"mappings":";;AAAA,SAAQA,KAAR,EAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB,C,CAGA;AAGA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGE,MAAMC,YAAY,GAAG,MAAM;AAExB,QAAM;AAAA,OAACC,eAAD;AAAA,OAAkBC;AAAlB,MAAwCL,QAAQ,CAAC,KAAD,CAAtD;;AAED,MAAII,eAAJ,EAAqB;AACnB,QAAIE,OAAJ,EAAa;AACX,0BAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFD,MAEO;AACL,0BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAKD;AACF;;AACC,sBACE,QAAC,MAAD;AAAQ,IAAA,OAAO,EAAEA,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApBH;;AAsBF,eAAeJ,YAAf","sourcesContent":["import {React, useEffect, useRef, useState} from 'react';\r\nimport Button from '../../styles/GlobalComponents/Button';\r\nimport Web3Modal from 'web3modal';\r\n\r\n\r\n//  // walletConnected keep track of whether the user's wallet is connected or not\r\n \r\n \r\n//  const [walletConnected, setWalletConnected] = useState(false);\r\n\r\n//  // Create a reference to the Web3 Modal (used for connecting to Metamask) which persists as long as the page is open\r\n//  const web3ModalRef = useRef();\r\n\r\n\r\n\r\n\r\n//  /**\r\n//    * Returns a Provider or Signer object representing the Ethereum RPC with or without the\r\n//    * signing capabilities of metamask attached\r\n//    *\r\n//    * A `Provider` is needed to interact with the blockchain - reading transactions, reading balances, reading state, etc.\r\n//    *\r\n//    * A `Signer` is a special type of Provider used in case a `write` transaction needs to be made to the blockchain, which involves the connected account\r\n//    * needing to make a digital signature to authorize the transaction being sent. Metamask exposes a Signer API to allow your website to\r\n//    * request signatures from the user using Signer functions.\r\n//    *\r\n//    * @param {*} needSigner - True if you need the signer, default false otherwise\r\n//    */\r\n//  const getProviderOrSigner = async (needSigner = false) => {\r\n//   // Connect to Metamask\r\n//   // Since we store `web3Modal` as a reference, we need to access the `current` value to get access to the underlying object\r\n//   const provider = await web3ModalRef.current.connect();\r\n//   const web3Provider = new providers.Web3Provider(provider);\r\n\r\n\r\n\r\n//   // If user is not connected to the Rinkeby network, let them know and throw an error\r\n//   const { chainId } = await web3Provider.getNetwork();\r\n//   if (chainId !== 4) {\r\n//     window.alert(\"Change the network to Rinkeby\");\r\n//     throw new Error(\"Change network to Rinkeby\");\r\n//   }\r\n\r\n//   if (needSigner) {\r\n//     const signer = web3Provider.getSigner();\r\n//     return signer;\r\n//   }\r\n//   return web3Provider;\r\n// };\r\n\r\n//   /*\r\n//     connectWallet: Connects the MetaMask wallet\r\n//   */\r\n//     const connectWallet = async () => {\r\n//       try {\r\n//         // Get the provider from web3Modal, which in our case is MetaMask\r\n//         // When used for the first time, it prompts the user to connect their wallet\r\n//         await getProviderOrSigner();\r\n//         setWalletConnected(true);\r\n  \r\n//       } catch (err) {\r\n//         console.error(err);\r\n//       }\r\n//     };\r\n\r\n//     // useEffects are used to react to changes in state of the website\r\n//   // The array at the end of function call represents what state changes will trigger this effect\r\n//   // In this case, whenever the value of `walletConnected` changes - this effect will be called\r\n//   useEffect(() => {\r\n//     // if wallet is not connected, create a new instance of Web3Modal and connect the MetaMask wallet\r\n//     if (!walletConnected) {\r\n//       // Assign the Web3Modal class to the reference object by setting it's `current` value\r\n//       // The `current` value is persisted throughout as long as this page is open\r\n//       web3ModalRef.current = new Web3Modal({\r\n//         network: \"rinkeby\",\r\n//         providerOptions: {},\r\n//         disableInjectedProvider: false,\r\n//       });\r\n//       connectWallet();\r\n//     }\r\n//   }, [walletConnected]);\r\n\r\n\r\n  const RenderButton = () => {\r\n\r\n     const [walletConnected, setWalletConnected] = useState(false);\r\n\r\n    if (walletConnected) {\r\n      if (loading) {\r\n        return <Button>Loading...</Button>;\r\n      } else {\r\n        return (\r\n          <Button onClick={connectWallet}>\r\n          Connect your wallet\r\n        </Button>\r\n        );\r\n      }\r\n    }\r\n      return (\r\n        <Button onClick={connectWallet}>\r\n          Mint\r\n        </Button>\r\n      );\r\n    };\r\n\r\nexport default RenderButton"]},"metadata":{},"sourceType":"module"}