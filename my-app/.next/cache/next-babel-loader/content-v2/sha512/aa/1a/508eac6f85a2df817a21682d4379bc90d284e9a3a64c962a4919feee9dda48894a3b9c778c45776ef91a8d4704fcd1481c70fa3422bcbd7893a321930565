{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Owini\\\\OneDrive\\\\Desktop\\\\NFTYVacation\\\\my-app\\\\src\\\\components\\\\Hero\\\\Hero.js\",\n    _this = this;\n\nimport React from 'react';\nimport { useEffect, useRef, useState } from \"react\";\nimport Web3Modal from \"web3modal\";\nimport { Section, SectionText, SectionTitle, SectionSubText, SectionTextTop, SectionTextBottom, SectionTextMain } from '../../styles/GlobalComponents';\nimport Button from '../../styles/GlobalComponents/Button';\nimport { LeftSection, TopSection } from './HeroStyles'; // walletConnected keep track of whether the user's wallet is connected or not\n\nvar _useState = useState(false),\n    walletConnected = _useState[0],\n    setWalletConnected = _useState[1]; //  // Create a reference to the Web3 Modal (used for connecting to Metamask) which persists as long as the page is open\n//  const web3ModalRef = useRef();\n//  /**\n//    * Returns a Provider or Signer object representing the Ethereum RPC with or without the\n//    * signing capabilities of metamask attached\n//    *\n//    * A `Provider` is needed to interact with the blockchain - reading transactions, reading balances, reading state, etc.\n//    *\n//    * A `Signer` is a special type of Provider used in case a `write` transaction needs to be made to the blockchain, which involves the connected account\n//    * needing to make a digital signature to authorize the transaction being sent. Metamask exposes a Signer API to allow your website to\n//    * request signatures from the user using Signer functions.\n//    *\n//    * @param {*} needSigner - True if you need the signer, default false otherwise\n//    */\n//  const getProviderOrSigner = async (needSigner = false) => {\n//   // Connect to Metamask\n//   // Since we store `web3Modal` as a reference, we need to access the `current` value to get access to the underlying object\n//   const provider = await web3ModalRef.current.connect();\n//   const web3Provider = new providers.Web3Provider(provider);\n//   // If user is not connected to the Rinkeby network, let them know and throw an error\n//   const { chainId } = await web3Provider.getNetwork();\n//   if (chainId !== 4) {\n//     window.alert(\"Change the network to Rinkeby\");\n//     throw new Error(\"Change network to Rinkeby\");\n//   }\n//   if (needSigner) {\n//     const signer = web3Provider.getSigner();\n//     return signer;\n//   }\n//   return web3Provider;\n// };\n//   /*\n//     connectWallet: Connects the MetaMask wallet\n//   */\n//     const connectWallet = async () => {\n//       try {\n//         // Get the provider from web3Modal, which in our case is MetaMask\n//         // When used for the first time, it prompts the user to connect their wallet\n//         await getProviderOrSigner();\n//         setWalletConnected(true);\n//       } catch (err) {\n//         console.error(err);\n//       }\n//     };\n//     // useEffects are used to react to changes in state of the website\n//   // The array at the end of function call represents what state changes will trigger this effect\n//   // In this case, whenever the value of `walletConnected` changes - this effect will be called\n//   useEffect(() => {\n//     // if wallet is not connected, create a new instance of Web3Modal and connect the MetaMask wallet\n//     if (!walletConnected) {\n//       // Assign the Web3Modal class to the reference object by setting it's `current` value\n//       // The `current` value is persisted throughout as long as this page is open\n//       web3ModalRef.current = new Web3Modal({\n//         network: \"rinkeby\",\n//         providerOptions: {},\n//         disableInjectedProvider: false,\n//       });\n//       connectWallet();\n//     }\n//   }, [walletConnected]);\n//   const renderButton = () => {\n//     if (walletConnected) {\n//       if (loading) {\n//         return <Button>Loading...</Button>;\n//       } else {\n//         return (\n//           <Button onClick={connectWallet}>\n//           Connect your wallet\n//         </Button>\n//         );\n//       }\n//     }\n//       return (\n//         <Button onClick={connectWallet}>\n//           Mint\n//         </Button>\n//       );\n//     };\n\n\nvar Hero = function Hero(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Section, {\n      children: /*#__PURE__*/_jsxDEV(LeftSection, {\n        children: [/*#__PURE__*/_jsxDEV(SectionTextTop, {\n          children: \"Mint A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, _this), /*#__PURE__*/_jsxDEV(SectionTextMain, {\n          children: \"VACATION\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(SectionTextBottom, {\n          children: \"With $250 Only!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }, _this), renderButton()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 3\n    }, _this)\n  }, void 0, false);\n};\n\n_c = Hero;\nexport default Hero;\n\nvar _c;\n\n$RefreshReg$(_c, \"Hero\");","map":{"version":3,"sources":["C:/Users/Owini/OneDrive/Desktop/NFTYVacation/my-app/src/components/Hero/Hero.js"],"names":["React","useEffect","useRef","useState","Web3Modal","Section","SectionText","SectionTitle","SectionSubText","SectionTextTop","SectionTextBottom","SectionTextMain","Button","LeftSection","TopSection","walletConnected","setWalletConnected","Hero","props","renderButton"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAASC,OAAT,EAAkBC,WAAlB,EAA+BC,YAA/B,EAA6CC,cAA7C,EAA6DC,cAA7D,EAA6EC,iBAA7E,EAAgGC,eAAhG,QAAuH,+BAAvH;AACA,OAAOC,MAAP,MAAmB,sCAAnB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,cAAxC,C,CAGC;;gBAC8CX,QAAQ,CAAC,KAAD,C;IAA/CY,e;IAAiBC,kB,iBAEzB;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD;AAAA,sBACX;AAAA,2BACA,QAAC,OAAD;AAAA,6BACI,QAAC,WAAD;AAAA,gCACQ,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADR,eAIE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJF,eAQE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBARF,EAYGC,YAAY,EAZf;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA,mBADW;AAAA,CAAb;;KAAMF,I;AAqBN,eAAeA,IAAf","sourcesContent":["import React from 'react';\nimport { useEffect, useRef, useState } from \"react\";\nimport Web3Modal from \"web3modal\";\nimport { Section, SectionText, SectionTitle, SectionSubText, SectionTextTop, SectionTextBottom, SectionTextMain } from '../../styles/GlobalComponents';\nimport Button from '../../styles/GlobalComponents/Button';\nimport { LeftSection, TopSection } from './HeroStyles';\n\n\n // walletConnected keep track of whether the user's wallet is connected or not\n const [walletConnected, setWalletConnected] = useState(false);\n\n//  // Create a reference to the Web3 Modal (used for connecting to Metamask) which persists as long as the page is open\n//  const web3ModalRef = useRef();\n\n\n\n\n//  /**\n//    * Returns a Provider or Signer object representing the Ethereum RPC with or without the\n//    * signing capabilities of metamask attached\n//    *\n//    * A `Provider` is needed to interact with the blockchain - reading transactions, reading balances, reading state, etc.\n//    *\n//    * A `Signer` is a special type of Provider used in case a `write` transaction needs to be made to the blockchain, which involves the connected account\n//    * needing to make a digital signature to authorize the transaction being sent. Metamask exposes a Signer API to allow your website to\n//    * request signatures from the user using Signer functions.\n//    *\n//    * @param {*} needSigner - True if you need the signer, default false otherwise\n//    */\n//  const getProviderOrSigner = async (needSigner = false) => {\n//   // Connect to Metamask\n//   // Since we store `web3Modal` as a reference, we need to access the `current` value to get access to the underlying object\n//   const provider = await web3ModalRef.current.connect();\n//   const web3Provider = new providers.Web3Provider(provider);\n\n\n\n//   // If user is not connected to the Rinkeby network, let them know and throw an error\n//   const { chainId } = await web3Provider.getNetwork();\n//   if (chainId !== 4) {\n//     window.alert(\"Change the network to Rinkeby\");\n//     throw new Error(\"Change network to Rinkeby\");\n//   }\n\n//   if (needSigner) {\n//     const signer = web3Provider.getSigner();\n//     return signer;\n//   }\n//   return web3Provider;\n// };\n\n//   /*\n//     connectWallet: Connects the MetaMask wallet\n//   */\n//     const connectWallet = async () => {\n//       try {\n//         // Get the provider from web3Modal, which in our case is MetaMask\n//         // When used for the first time, it prompts the user to connect their wallet\n//         await getProviderOrSigner();\n//         setWalletConnected(true);\n  \n//       } catch (err) {\n//         console.error(err);\n//       }\n//     };\n\n//     // useEffects are used to react to changes in state of the website\n//   // The array at the end of function call represents what state changes will trigger this effect\n//   // In this case, whenever the value of `walletConnected` changes - this effect will be called\n//   useEffect(() => {\n//     // if wallet is not connected, create a new instance of Web3Modal and connect the MetaMask wallet\n//     if (!walletConnected) {\n//       // Assign the Web3Modal class to the reference object by setting it's `current` value\n//       // The `current` value is persisted throughout as long as this page is open\n//       web3ModalRef.current = new Web3Modal({\n//         network: \"rinkeby\",\n//         providerOptions: {},\n//         disableInjectedProvider: false,\n//       });\n//       connectWallet();\n//     }\n//   }, [walletConnected]);\n\n\n//   const renderButton = () => {\n//     if (walletConnected) {\n//       if (loading) {\n//         return <Button>Loading...</Button>;\n//       } else {\n//         return (\n//           <Button onClick={connectWallet}>\n//           Connect your wallet\n//         </Button>\n//         );\n//       }\n//     }\n//       return (\n//         <Button onClick={connectWallet}>\n//           Mint\n//         </Button>\n//       );\n//     };\n  \n\n\nconst Hero = (props) => (\n  <>\n  <Section >\n      <LeftSection>\n              <SectionTextTop>\n                Mint A\n              </SectionTextTop>\n        <SectionTextMain>\n          VACATION\n        </SectionTextMain>\n\n        <SectionTextBottom>\n           With $250 Only!\n        </SectionTextBottom>\n        \n        {renderButton()}\n      </LeftSection>\n    </Section>\n  </>\n);\n\nexport default Hero;"]},"metadata":{},"sourceType":"module"}